package org.nterlearning.datamodel.catalog.service.base;

import com.liferay.counter.service.CounterLocalService;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.bean.IdentifiableBean;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.search.Indexer;
import com.liferay.portal.kernel.search.IndexerRegistryUtil;
import com.liferay.portal.kernel.search.SearchException;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.model.PersistedModel;
import com.liferay.portal.service.PersistedModelLocalServiceRegistryUtil;
import com.liferay.portal.service.ResourceLocalService;
import com.liferay.portal.service.ResourceService;
import com.liferay.portal.service.UserLocalService;
import com.liferay.portal.service.UserService;
import com.liferay.portal.service.persistence.ResourcePersistence;
import com.liferay.portal.service.persistence.UserPersistence;

import org.nterlearning.datamodel.catalog.model.FlagReportStats;
import org.nterlearning.datamodel.catalog.service.ComponentLocalService;
import org.nterlearning.datamodel.catalog.service.ComponentRecordLocalService;
import org.nterlearning.datamodel.catalog.service.ContributorLocalService;
import org.nterlearning.datamodel.catalog.service.CourseImageLocalService;
import org.nterlearning.datamodel.catalog.service.CourseLocalService;
import org.nterlearning.datamodel.catalog.service.CourseRecordLocalService;
import org.nterlearning.datamodel.catalog.service.CourseRelatedLocalService;
import org.nterlearning.datamodel.catalog.service.CourseRequirementLocalService;
import org.nterlearning.datamodel.catalog.service.CourseReviewLocalService;
import org.nterlearning.datamodel.catalog.service.Courses_ComponentsLocalService;
import org.nterlearning.datamodel.catalog.service.ExternalLinkLocalService;
import org.nterlearning.datamodel.catalog.service.FeedReferenceLocalService;
import org.nterlearning.datamodel.catalog.service.FeedSyncHistoryLocalService;
import org.nterlearning.datamodel.catalog.service.FlagReportLocalService;
import org.nterlearning.datamodel.catalog.service.FlagReportStatsLocalService;
import org.nterlearning.datamodel.catalog.service.GlobalCourseReviewLocalService;
import org.nterlearning.datamodel.catalog.service.persistence.ComponentFinder;
import org.nterlearning.datamodel.catalog.service.persistence.ComponentPersistence;
import org.nterlearning.datamodel.catalog.service.persistence.ComponentRecordPersistence;
import org.nterlearning.datamodel.catalog.service.persistence.ContributorPersistence;
import org.nterlearning.datamodel.catalog.service.persistence.CourseImagePersistence;
import org.nterlearning.datamodel.catalog.service.persistence.CoursePersistence;
import org.nterlearning.datamodel.catalog.service.persistence.CourseRecordPersistence;
import org.nterlearning.datamodel.catalog.service.persistence.CourseRelatedPersistence;
import org.nterlearning.datamodel.catalog.service.persistence.CourseRequirementPersistence;
import org.nterlearning.datamodel.catalog.service.persistence.CourseReviewPersistence;
import org.nterlearning.datamodel.catalog.service.persistence.Courses_ComponentsPersistence;
import org.nterlearning.datamodel.catalog.service.persistence.ExternalLinkPersistence;
import org.nterlearning.datamodel.catalog.service.persistence.FeedReferencePersistence;
import org.nterlearning.datamodel.catalog.service.persistence.FeedSyncHistoryPersistence;
import org.nterlearning.datamodel.catalog.service.persistence.FlagReportPersistence;
import org.nterlearning.datamodel.catalog.service.persistence.FlagReportStatsPersistence;
import org.nterlearning.datamodel.catalog.service.persistence.GlobalCourseReviewPersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * The base implementation of the flag report stats local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link org.nterlearning.datamodel.catalog.service.impl.FlagReportStatsLocalServiceImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see org.nterlearning.datamodel.catalog.service.impl.FlagReportStatsLocalServiceImpl
 * @see org.nterlearning.datamodel.catalog.service.FlagReportStatsLocalServiceUtil
 * @generated
 */
public abstract class FlagReportStatsLocalServiceBaseImpl
    implements FlagReportStatsLocalService, IdentifiableBean {
    private static Log _log = LogFactoryUtil.getLog(FlagReportStatsLocalServiceBaseImpl.class);
    @BeanReference(type = ComponentLocalService.class)
    protected ComponentLocalService componentLocalService;
    @BeanReference(type = ComponentPersistence.class)
    protected ComponentPersistence componentPersistence;
    @BeanReference(type = ComponentFinder.class)
    protected ComponentFinder componentFinder;
    @BeanReference(type = ComponentRecordLocalService.class)
    protected ComponentRecordLocalService componentRecordLocalService;
    @BeanReference(type = ComponentRecordPersistence.class)
    protected ComponentRecordPersistence componentRecordPersistence;
    @BeanReference(type = ContributorLocalService.class)
    protected ContributorLocalService contributorLocalService;
    @BeanReference(type = ContributorPersistence.class)
    protected ContributorPersistence contributorPersistence;
    @BeanReference(type = CourseLocalService.class)
    protected CourseLocalService courseLocalService;
    @BeanReference(type = CoursePersistence.class)
    protected CoursePersistence coursePersistence;
    @BeanReference(type = CourseImageLocalService.class)
    protected CourseImageLocalService courseImageLocalService;
    @BeanReference(type = CourseImagePersistence.class)
    protected CourseImagePersistence courseImagePersistence;
    @BeanReference(type = CourseRecordLocalService.class)
    protected CourseRecordLocalService courseRecordLocalService;
    @BeanReference(type = CourseRecordPersistence.class)
    protected CourseRecordPersistence courseRecordPersistence;
    @BeanReference(type = CourseRelatedLocalService.class)
    protected CourseRelatedLocalService courseRelatedLocalService;
    @BeanReference(type = CourseRelatedPersistence.class)
    protected CourseRelatedPersistence courseRelatedPersistence;
    @BeanReference(type = CourseRequirementLocalService.class)
    protected CourseRequirementLocalService courseRequirementLocalService;
    @BeanReference(type = CourseRequirementPersistence.class)
    protected CourseRequirementPersistence courseRequirementPersistence;
    @BeanReference(type = CourseReviewLocalService.class)
    protected CourseReviewLocalService courseReviewLocalService;
    @BeanReference(type = CourseReviewPersistence.class)
    protected CourseReviewPersistence courseReviewPersistence;
    @BeanReference(type = Courses_ComponentsLocalService.class)
    protected Courses_ComponentsLocalService courses_ComponentsLocalService;
    @BeanReference(type = Courses_ComponentsPersistence.class)
    protected Courses_ComponentsPersistence courses_ComponentsPersistence;
    @BeanReference(type = ExternalLinkLocalService.class)
    protected ExternalLinkLocalService externalLinkLocalService;
    @BeanReference(type = ExternalLinkPersistence.class)
    protected ExternalLinkPersistence externalLinkPersistence;
    @BeanReference(type = FeedReferenceLocalService.class)
    protected FeedReferenceLocalService feedReferenceLocalService;
    @BeanReference(type = FeedReferencePersistence.class)
    protected FeedReferencePersistence feedReferencePersistence;
    @BeanReference(type = FeedSyncHistoryLocalService.class)
    protected FeedSyncHistoryLocalService feedSyncHistoryLocalService;
    @BeanReference(type = FeedSyncHistoryPersistence.class)
    protected FeedSyncHistoryPersistence feedSyncHistoryPersistence;
    @BeanReference(type = FlagReportLocalService.class)
    protected FlagReportLocalService flagReportLocalService;
    @BeanReference(type = FlagReportPersistence.class)
    protected FlagReportPersistence flagReportPersistence;
    @BeanReference(type = FlagReportStatsLocalService.class)
    protected FlagReportStatsLocalService flagReportStatsLocalService;
    @BeanReference(type = FlagReportStatsPersistence.class)
    protected FlagReportStatsPersistence flagReportStatsPersistence;
    @BeanReference(type = GlobalCourseReviewLocalService.class)
    protected GlobalCourseReviewLocalService globalCourseReviewLocalService;
    @BeanReference(type = GlobalCourseReviewPersistence.class)
    protected GlobalCourseReviewPersistence globalCourseReviewPersistence;
    @BeanReference(type = CounterLocalService.class)
    protected CounterLocalService counterLocalService;
    @BeanReference(type = ResourceLocalService.class)
    protected ResourceLocalService resourceLocalService;
    @BeanReference(type = ResourceService.class)
    protected ResourceService resourceService;
    @BeanReference(type = ResourcePersistence.class)
    protected ResourcePersistence resourcePersistence;
    @BeanReference(type = UserLocalService.class)
    protected UserLocalService userLocalService;
    @BeanReference(type = UserService.class)
    protected UserService userService;
    @BeanReference(type = UserPersistence.class)
    protected UserPersistence userPersistence;
    private String _beanIdentifier;

    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. Always use {@link org.nterlearning.datamodel.catalog.service.FlagReportStatsLocalServiceUtil} to access the flag report stats local service.
     */

    /**
     * Adds the flag report stats to the database. Also notifies the appropriate model listeners.
     *
     * @param flagReportStats the flag report stats
     * @return the flag report stats that was added
     * @throws SystemException if a system exception occurred
     */
    public FlagReportStats addFlagReportStats(FlagReportStats flagReportStats)
        throws SystemException {
        flagReportStats.setNew(true);

        flagReportStats = flagReportStatsPersistence.update(flagReportStats,
                false);

        Indexer indexer = IndexerRegistryUtil.getIndexer(getModelClassName());

        if (indexer != null) {
            try {
                indexer.reindex(flagReportStats);
            } catch (SearchException se) {
                if (_log.isWarnEnabled()) {
                    _log.warn(se, se);
                }
            }
        }

        return flagReportStats;
    }

    /**
     * Creates a new flag report stats with the primary key. Does not add the flag report stats to the database.
     *
     * @param flagReportStatsId the primary key for the new flag report stats
     * @return the new flag report stats
     */
    public FlagReportStats createFlagReportStats(long flagReportStatsId) {
        return flagReportStatsPersistence.create(flagReportStatsId);
    }

    /**
     * Deletes the flag report stats with the primary key from the database. Also notifies the appropriate model listeners.
     *
     * @param flagReportStatsId the primary key of the flag report stats
     * @throws PortalException if a flag report stats with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    public void deleteFlagReportStats(long flagReportStatsId)
        throws PortalException, SystemException {
        FlagReportStats flagReportStats = flagReportStatsPersistence.remove(flagReportStatsId);

        Indexer indexer = IndexerRegistryUtil.getIndexer(getModelClassName());

        if (indexer != null) {
            try {
                indexer.delete(flagReportStats);
            } catch (SearchException se) {
                if (_log.isWarnEnabled()) {
                    _log.warn(se, se);
                }
            }
        }
    }

    /**
     * Deletes the flag report stats from the database. Also notifies the appropriate model listeners.
     *
     * @param flagReportStats the flag report stats
     * @throws SystemException if a system exception occurred
     */
    public void deleteFlagReportStats(FlagReportStats flagReportStats)
        throws SystemException {
        flagReportStatsPersistence.remove(flagReportStats);

        Indexer indexer = IndexerRegistryUtil.getIndexer(getModelClassName());

        if (indexer != null) {
            try {
                indexer.delete(flagReportStats);
            } catch (SearchException se) {
                if (_log.isWarnEnabled()) {
                    _log.warn(se, se);
                }
            }
        }
    }

    /**
     * Performs a dynamic query on the database and returns the matching rows.
     *
     * @param dynamicQuery the dynamic query
     * @return the matching rows
     * @throws SystemException if a system exception occurred
     */
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery)
        throws SystemException {
        return flagReportStatsPersistence.findWithDynamicQuery(dynamicQuery);
    }

    /**
     * Performs a dynamic query on the database and returns a range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @return the range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end)
        throws SystemException {
        return flagReportStatsPersistence.findWithDynamicQuery(dynamicQuery,
            start, end);
    }

    /**
     * Performs a dynamic query on the database and returns an ordered range of the matching rows.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
     * </p>
     *
     * @param dynamicQuery the dynamic query
     * @param start the lower bound of the range of model instances
     * @param end the upper bound of the range of model instances (not inclusive)
     * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
     * @return the ordered range of matching rows
     * @throws SystemException if a system exception occurred
     */
    @SuppressWarnings("rawtypes")
    public List dynamicQuery(DynamicQuery dynamicQuery, int start, int end,
        OrderByComparator orderByComparator) throws SystemException {
        return flagReportStatsPersistence.findWithDynamicQuery(dynamicQuery,
            start, end, orderByComparator);
    }

    /**
     * Returns the number of rows that match the dynamic query.
     *
     * @param dynamicQuery the dynamic query
     * @return the number of rows that match the dynamic query
     * @throws SystemException if a system exception occurred
     */
    public long dynamicQueryCount(DynamicQuery dynamicQuery)
        throws SystemException {
        return flagReportStatsPersistence.countWithDynamicQuery(dynamicQuery);
    }

    public FlagReportStats fetchFlagReportStats(long flagReportStatsId)
        throws SystemException {
        return flagReportStatsPersistence.fetchByPrimaryKey(flagReportStatsId);
    }

    /**
     * Returns the flag report stats with the primary key.
     *
     * @param flagReportStatsId the primary key of the flag report stats
     * @return the flag report stats
     * @throws PortalException if a flag report stats with the primary key could not be found
     * @throws SystemException if a system exception occurred
     */
    public FlagReportStats getFlagReportStats(long flagReportStatsId)
        throws PortalException, SystemException {
        return flagReportStatsPersistence.findByPrimaryKey(flagReportStatsId);
    }

    public PersistedModel getPersistedModel(Serializable primaryKeyObj)
        throws PortalException, SystemException {
        return flagReportStatsPersistence.findByPrimaryKey(primaryKeyObj);
    }

    /**
     * Returns a range of all the flag report statses.
     *
     * <p>
     * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set.
     * </p>
     *
     * @param start the lower bound of the range of flag report statses
     * @param end the upper bound of the range of flag report statses (not inclusive)
     * @return the range of flag report statses
     * @throws SystemException if a system exception occurred
     */
    public List<FlagReportStats> getFlagReportStatses(int start, int end)
        throws SystemException {
        return flagReportStatsPersistence.findAll(start, end);
    }

    /**
     * Returns the number of flag report statses.
     *
     * @return the number of flag report statses
     * @throws SystemException if a system exception occurred
     */
    public int getFlagReportStatsesCount() throws SystemException {
        return flagReportStatsPersistence.countAll();
    }

    /**
     * Updates the flag report stats in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param flagReportStats the flag report stats
     * @return the flag report stats that was updated
     * @throws SystemException if a system exception occurred
     */
    public FlagReportStats updateFlagReportStats(
        FlagReportStats flagReportStats) throws SystemException {
        return updateFlagReportStats(flagReportStats, true);
    }

    /**
     * Updates the flag report stats in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
     *
     * @param flagReportStats the flag report stats
     * @param merge whether to merge the flag report stats with the current session. See {@link com.liferay.portal.service.persistence.BatchSession#update(com.liferay.portal.kernel.dao.orm.Session, com.liferay.portal.model.BaseModel, boolean)} for an explanation.
     * @return the flag report stats that was updated
     * @throws SystemException if a system exception occurred
     */
    public FlagReportStats updateFlagReportStats(
        FlagReportStats flagReportStats, boolean merge)
        throws SystemException {
        flagReportStats.setNew(false);

        flagReportStats = flagReportStatsPersistence.update(flagReportStats,
                merge);

        Indexer indexer = IndexerRegistryUtil.getIndexer(getModelClassName());

        if (indexer != null) {
            try {
                indexer.reindex(flagReportStats);
            } catch (SearchException se) {
                if (_log.isWarnEnabled()) {
                    _log.warn(se, se);
                }
            }
        }

        return flagReportStats;
    }

    /**
     * Returns the component local service.
     *
     * @return the component local service
     */
    public ComponentLocalService getComponentLocalService() {
        return componentLocalService;
    }

    /**
     * Sets the component local service.
     *
     * @param componentLocalService the component local service
     */
    public void setComponentLocalService(
        ComponentLocalService componentLocalService) {
        this.componentLocalService = componentLocalService;
    }

    /**
     * Returns the component persistence.
     *
     * @return the component persistence
     */
    public ComponentPersistence getComponentPersistence() {
        return componentPersistence;
    }

    /**
     * Sets the component persistence.
     *
     * @param componentPersistence the component persistence
     */
    public void setComponentPersistence(
        ComponentPersistence componentPersistence) {
        this.componentPersistence = componentPersistence;
    }

    /**
     * Returns the component finder.
     *
     * @return the component finder
     */
    public ComponentFinder getComponentFinder() {
        return componentFinder;
    }

    /**
     * Sets the component finder.
     *
     * @param componentFinder the component finder
     */
    public void setComponentFinder(ComponentFinder componentFinder) {
        this.componentFinder = componentFinder;
    }

    /**
     * Returns the component record local service.
     *
     * @return the component record local service
     */
    public ComponentRecordLocalService getComponentRecordLocalService() {
        return componentRecordLocalService;
    }

    /**
     * Sets the component record local service.
     *
     * @param componentRecordLocalService the component record local service
     */
    public void setComponentRecordLocalService(
        ComponentRecordLocalService componentRecordLocalService) {
        this.componentRecordLocalService = componentRecordLocalService;
    }

    /**
     * Returns the component record persistence.
     *
     * @return the component record persistence
     */
    public ComponentRecordPersistence getComponentRecordPersistence() {
        return componentRecordPersistence;
    }

    /**
     * Sets the component record persistence.
     *
     * @param componentRecordPersistence the component record persistence
     */
    public void setComponentRecordPersistence(
        ComponentRecordPersistence componentRecordPersistence) {
        this.componentRecordPersistence = componentRecordPersistence;
    }

    /**
     * Returns the contributor local service.
     *
     * @return the contributor local service
     */
    public ContributorLocalService getContributorLocalService() {
        return contributorLocalService;
    }

    /**
     * Sets the contributor local service.
     *
     * @param contributorLocalService the contributor local service
     */
    public void setContributorLocalService(
        ContributorLocalService contributorLocalService) {
        this.contributorLocalService = contributorLocalService;
    }

    /**
     * Returns the contributor persistence.
     *
     * @return the contributor persistence
     */
    public ContributorPersistence getContributorPersistence() {
        return contributorPersistence;
    }

    /**
     * Sets the contributor persistence.
     *
     * @param contributorPersistence the contributor persistence
     */
    public void setContributorPersistence(
        ContributorPersistence contributorPersistence) {
        this.contributorPersistence = contributorPersistence;
    }

    /**
     * Returns the course local service.
     *
     * @return the course local service
     */
    public CourseLocalService getCourseLocalService() {
        return courseLocalService;
    }

    /**
     * Sets the course local service.
     *
     * @param courseLocalService the course local service
     */
    public void setCourseLocalService(CourseLocalService courseLocalService) {
        this.courseLocalService = courseLocalService;
    }

    /**
     * Returns the course persistence.
     *
     * @return the course persistence
     */
    public CoursePersistence getCoursePersistence() {
        return coursePersistence;
    }

    /**
     * Sets the course persistence.
     *
     * @param coursePersistence the course persistence
     */
    public void setCoursePersistence(CoursePersistence coursePersistence) {
        this.coursePersistence = coursePersistence;
    }

    /**
     * Returns the course image local service.
     *
     * @return the course image local service
     */
    public CourseImageLocalService getCourseImageLocalService() {
        return courseImageLocalService;
    }

    /**
     * Sets the course image local service.
     *
     * @param courseImageLocalService the course image local service
     */
    public void setCourseImageLocalService(
        CourseImageLocalService courseImageLocalService) {
        this.courseImageLocalService = courseImageLocalService;
    }

    /**
     * Returns the course image persistence.
     *
     * @return the course image persistence
     */
    public CourseImagePersistence getCourseImagePersistence() {
        return courseImagePersistence;
    }

    /**
     * Sets the course image persistence.
     *
     * @param courseImagePersistence the course image persistence
     */
    public void setCourseImagePersistence(
        CourseImagePersistence courseImagePersistence) {
        this.courseImagePersistence = courseImagePersistence;
    }

    /**
     * Returns the course record local service.
     *
     * @return the course record local service
     */
    public CourseRecordLocalService getCourseRecordLocalService() {
        return courseRecordLocalService;
    }

    /**
     * Sets the course record local service.
     *
     * @param courseRecordLocalService the course record local service
     */
    public void setCourseRecordLocalService(
        CourseRecordLocalService courseRecordLocalService) {
        this.courseRecordLocalService = courseRecordLocalService;
    }

    /**
     * Returns the course record persistence.
     *
     * @return the course record persistence
     */
    public CourseRecordPersistence getCourseRecordPersistence() {
        return courseRecordPersistence;
    }

    /**
     * Sets the course record persistence.
     *
     * @param courseRecordPersistence the course record persistence
     */
    public void setCourseRecordPersistence(
        CourseRecordPersistence courseRecordPersistence) {
        this.courseRecordPersistence = courseRecordPersistence;
    }

    /**
     * Returns the course related local service.
     *
     * @return the course related local service
     */
    public CourseRelatedLocalService getCourseRelatedLocalService() {
        return courseRelatedLocalService;
    }

    /**
     * Sets the course related local service.
     *
     * @param courseRelatedLocalService the course related local service
     */
    public void setCourseRelatedLocalService(
        CourseRelatedLocalService courseRelatedLocalService) {
        this.courseRelatedLocalService = courseRelatedLocalService;
    }

    /**
     * Returns the course related persistence.
     *
     * @return the course related persistence
     */
    public CourseRelatedPersistence getCourseRelatedPersistence() {
        return courseRelatedPersistence;
    }

    /**
     * Sets the course related persistence.
     *
     * @param courseRelatedPersistence the course related persistence
     */
    public void setCourseRelatedPersistence(
        CourseRelatedPersistence courseRelatedPersistence) {
        this.courseRelatedPersistence = courseRelatedPersistence;
    }

    /**
     * Returns the course requirement local service.
     *
     * @return the course requirement local service
     */
    public CourseRequirementLocalService getCourseRequirementLocalService() {
        return courseRequirementLocalService;
    }

    /**
     * Sets the course requirement local service.
     *
     * @param courseRequirementLocalService the course requirement local service
     */
    public void setCourseRequirementLocalService(
        CourseRequirementLocalService courseRequirementLocalService) {
        this.courseRequirementLocalService = courseRequirementLocalService;
    }

    /**
     * Returns the course requirement persistence.
     *
     * @return the course requirement persistence
     */
    public CourseRequirementPersistence getCourseRequirementPersistence() {
        return courseRequirementPersistence;
    }

    /**
     * Sets the course requirement persistence.
     *
     * @param courseRequirementPersistence the course requirement persistence
     */
    public void setCourseRequirementPersistence(
        CourseRequirementPersistence courseRequirementPersistence) {
        this.courseRequirementPersistence = courseRequirementPersistence;
    }

    /**
     * Returns the course review local service.
     *
     * @return the course review local service
     */
    public CourseReviewLocalService getCourseReviewLocalService() {
        return courseReviewLocalService;
    }

    /**
     * Sets the course review local service.
     *
     * @param courseReviewLocalService the course review local service
     */
    public void setCourseReviewLocalService(
        CourseReviewLocalService courseReviewLocalService) {
        this.courseReviewLocalService = courseReviewLocalService;
    }

    /**
     * Returns the course review persistence.
     *
     * @return the course review persistence
     */
    public CourseReviewPersistence getCourseReviewPersistence() {
        return courseReviewPersistence;
    }

    /**
     * Sets the course review persistence.
     *
     * @param courseReviewPersistence the course review persistence
     */
    public void setCourseReviewPersistence(
        CourseReviewPersistence courseReviewPersistence) {
        this.courseReviewPersistence = courseReviewPersistence;
    }

    /**
     * Returns the courses_ components local service.
     *
     * @return the courses_ components local service
     */
    public Courses_ComponentsLocalService getCourses_ComponentsLocalService() {
        return courses_ComponentsLocalService;
    }

    /**
     * Sets the courses_ components local service.
     *
     * @param courses_ComponentsLocalService the courses_ components local service
     */
    public void setCourses_ComponentsLocalService(
        Courses_ComponentsLocalService courses_ComponentsLocalService) {
        this.courses_ComponentsLocalService = courses_ComponentsLocalService;
    }

    /**
     * Returns the courses_ components persistence.
     *
     * @return the courses_ components persistence
     */
    public Courses_ComponentsPersistence getCourses_ComponentsPersistence() {
        return courses_ComponentsPersistence;
    }

    /**
     * Sets the courses_ components persistence.
     *
     * @param courses_ComponentsPersistence the courses_ components persistence
     */
    public void setCourses_ComponentsPersistence(
        Courses_ComponentsPersistence courses_ComponentsPersistence) {
        this.courses_ComponentsPersistence = courses_ComponentsPersistence;
    }

    /**
     * Returns the external link local service.
     *
     * @return the external link local service
     */
    public ExternalLinkLocalService getExternalLinkLocalService() {
        return externalLinkLocalService;
    }

    /**
     * Sets the external link local service.
     *
     * @param externalLinkLocalService the external link local service
     */
    public void setExternalLinkLocalService(
        ExternalLinkLocalService externalLinkLocalService) {
        this.externalLinkLocalService = externalLinkLocalService;
    }

    /**
     * Returns the external link persistence.
     *
     * @return the external link persistence
     */
    public ExternalLinkPersistence getExternalLinkPersistence() {
        return externalLinkPersistence;
    }

    /**
     * Sets the external link persistence.
     *
     * @param externalLinkPersistence the external link persistence
     */
    public void setExternalLinkPersistence(
        ExternalLinkPersistence externalLinkPersistence) {
        this.externalLinkPersistence = externalLinkPersistence;
    }

    /**
     * Returns the feed reference local service.
     *
     * @return the feed reference local service
     */
    public FeedReferenceLocalService getFeedReferenceLocalService() {
        return feedReferenceLocalService;
    }

    /**
     * Sets the feed reference local service.
     *
     * @param feedReferenceLocalService the feed reference local service
     */
    public void setFeedReferenceLocalService(
        FeedReferenceLocalService feedReferenceLocalService) {
        this.feedReferenceLocalService = feedReferenceLocalService;
    }

    /**
     * Returns the feed reference persistence.
     *
     * @return the feed reference persistence
     */
    public FeedReferencePersistence getFeedReferencePersistence() {
        return feedReferencePersistence;
    }

    /**
     * Sets the feed reference persistence.
     *
     * @param feedReferencePersistence the feed reference persistence
     */
    public void setFeedReferencePersistence(
        FeedReferencePersistence feedReferencePersistence) {
        this.feedReferencePersistence = feedReferencePersistence;
    }

    /**
     * Returns the feed sync history local service.
     *
     * @return the feed sync history local service
     */
    public FeedSyncHistoryLocalService getFeedSyncHistoryLocalService() {
        return feedSyncHistoryLocalService;
    }

    /**
     * Sets the feed sync history local service.
     *
     * @param feedSyncHistoryLocalService the feed sync history local service
     */
    public void setFeedSyncHistoryLocalService(
        FeedSyncHistoryLocalService feedSyncHistoryLocalService) {
        this.feedSyncHistoryLocalService = feedSyncHistoryLocalService;
    }

    /**
     * Returns the feed sync history persistence.
     *
     * @return the feed sync history persistence
     */
    public FeedSyncHistoryPersistence getFeedSyncHistoryPersistence() {
        return feedSyncHistoryPersistence;
    }

    /**
     * Sets the feed sync history persistence.
     *
     * @param feedSyncHistoryPersistence the feed sync history persistence
     */
    public void setFeedSyncHistoryPersistence(
        FeedSyncHistoryPersistence feedSyncHistoryPersistence) {
        this.feedSyncHistoryPersistence = feedSyncHistoryPersistence;
    }

    /**
     * Returns the flag report local service.
     *
     * @return the flag report local service
     */
    public FlagReportLocalService getFlagReportLocalService() {
        return flagReportLocalService;
    }

    /**
     * Sets the flag report local service.
     *
     * @param flagReportLocalService the flag report local service
     */
    public void setFlagReportLocalService(
        FlagReportLocalService flagReportLocalService) {
        this.flagReportLocalService = flagReportLocalService;
    }

    /**
     * Returns the flag report persistence.
     *
     * @return the flag report persistence
     */
    public FlagReportPersistence getFlagReportPersistence() {
        return flagReportPersistence;
    }

    /**
     * Sets the flag report persistence.
     *
     * @param flagReportPersistence the flag report persistence
     */
    public void setFlagReportPersistence(
        FlagReportPersistence flagReportPersistence) {
        this.flagReportPersistence = flagReportPersistence;
    }

    /**
     * Returns the flag report stats local service.
     *
     * @return the flag report stats local service
     */
    public FlagReportStatsLocalService getFlagReportStatsLocalService() {
        return flagReportStatsLocalService;
    }

    /**
     * Sets the flag report stats local service.
     *
     * @param flagReportStatsLocalService the flag report stats local service
     */
    public void setFlagReportStatsLocalService(
        FlagReportStatsLocalService flagReportStatsLocalService) {
        this.flagReportStatsLocalService = flagReportStatsLocalService;
    }

    /**
     * Returns the flag report stats persistence.
     *
     * @return the flag report stats persistence
     */
    public FlagReportStatsPersistence getFlagReportStatsPersistence() {
        return flagReportStatsPersistence;
    }

    /**
     * Sets the flag report stats persistence.
     *
     * @param flagReportStatsPersistence the flag report stats persistence
     */
    public void setFlagReportStatsPersistence(
        FlagReportStatsPersistence flagReportStatsPersistence) {
        this.flagReportStatsPersistence = flagReportStatsPersistence;
    }

    /**
     * Returns the global course review local service.
     *
     * @return the global course review local service
     */
    public GlobalCourseReviewLocalService getGlobalCourseReviewLocalService() {
        return globalCourseReviewLocalService;
    }

    /**
     * Sets the global course review local service.
     *
     * @param globalCourseReviewLocalService the global course review local service
     */
    public void setGlobalCourseReviewLocalService(
        GlobalCourseReviewLocalService globalCourseReviewLocalService) {
        this.globalCourseReviewLocalService = globalCourseReviewLocalService;
    }

    /**
     * Returns the global course review persistence.
     *
     * @return the global course review persistence
     */
    public GlobalCourseReviewPersistence getGlobalCourseReviewPersistence() {
        return globalCourseReviewPersistence;
    }

    /**
     * Sets the global course review persistence.
     *
     * @param globalCourseReviewPersistence the global course review persistence
     */
    public void setGlobalCourseReviewPersistence(
        GlobalCourseReviewPersistence globalCourseReviewPersistence) {
        this.globalCourseReviewPersistence = globalCourseReviewPersistence;
    }

    /**
     * Returns the counter local service.
     *
     * @return the counter local service
     */
    public CounterLocalService getCounterLocalService() {
        return counterLocalService;
    }

    /**
     * Sets the counter local service.
     *
     * @param counterLocalService the counter local service
     */
    public void setCounterLocalService(CounterLocalService counterLocalService) {
        this.counterLocalService = counterLocalService;
    }

    /**
     * Returns the resource local service.
     *
     * @return the resource local service
     */
    public ResourceLocalService getResourceLocalService() {
        return resourceLocalService;
    }

    /**
     * Sets the resource local service.
     *
     * @param resourceLocalService the resource local service
     */
    public void setResourceLocalService(
        ResourceLocalService resourceLocalService) {
        this.resourceLocalService = resourceLocalService;
    }

    /**
     * Returns the resource remote service.
     *
     * @return the resource remote service
     */
    public ResourceService getResourceService() {
        return resourceService;
    }

    /**
     * Sets the resource remote service.
     *
     * @param resourceService the resource remote service
     */
    public void setResourceService(ResourceService resourceService) {
        this.resourceService = resourceService;
    }

    /**
     * Returns the resource persistence.
     *
     * @return the resource persistence
     */
    public ResourcePersistence getResourcePersistence() {
        return resourcePersistence;
    }

    /**
     * Sets the resource persistence.
     *
     * @param resourcePersistence the resource persistence
     */
    public void setResourcePersistence(ResourcePersistence resourcePersistence) {
        this.resourcePersistence = resourcePersistence;
    }

    /**
     * Returns the user local service.
     *
     * @return the user local service
     */
    public UserLocalService getUserLocalService() {
        return userLocalService;
    }

    /**
     * Sets the user local service.
     *
     * @param userLocalService the user local service
     */
    public void setUserLocalService(UserLocalService userLocalService) {
        this.userLocalService = userLocalService;
    }

    /**
     * Returns the user remote service.
     *
     * @return the user remote service
     */
    public UserService getUserService() {
        return userService;
    }

    /**
     * Sets the user remote service.
     *
     * @param userService the user remote service
     */
    public void setUserService(UserService userService) {
        this.userService = userService;
    }

    /**
     * Returns the user persistence.
     *
     * @return the user persistence
     */
    public UserPersistence getUserPersistence() {
        return userPersistence;
    }

    /**
     * Sets the user persistence.
     *
     * @param userPersistence the user persistence
     */
    public void setUserPersistence(UserPersistence userPersistence) {
        this.userPersistence = userPersistence;
    }

    public void afterPropertiesSet() {
        PersistedModelLocalServiceRegistryUtil.register("org.nterlearning.datamodel.catalog.model.FlagReportStats",
            flagReportStatsLocalService);
    }

    public void destroy() {
        PersistedModelLocalServiceRegistryUtil.unregister(
            "org.nterlearning.datamodel.catalog.model.FlagReportStats");
    }

    /**
     * Returns the Spring bean ID for this bean.
     *
     * @return the Spring bean ID for this bean
     */
    public String getBeanIdentifier() {
        return _beanIdentifier;
    }

    /**
     * Sets the Spring bean ID for this bean.
     *
     * @param beanIdentifier the Spring bean ID for this bean
     */
    public void setBeanIdentifier(String beanIdentifier) {
        _beanIdentifier = beanIdentifier;
    }

    protected Class<?> getModelClass() {
        return FlagReportStats.class;
    }

    protected String getModelClassName() {
        return FlagReportStats.class.getName();
    }

    /**
     * Performs an SQL query.
     *
     * @param sql the sql query
     */
    protected void runSQL(String sql) throws SystemException {
        try {
            DataSource dataSource = flagReportStatsPersistence.getDataSource();

            SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
                    sql, new int[0]);

            sqlUpdate.update();
        } catch (Exception e) {
            throw new SystemException(e);
        }
    }
}
